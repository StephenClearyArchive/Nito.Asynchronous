<?xml version="1.0" encoding="utf-8"?>
<topic id="8059f511-e59f-4aae-b282-942fcb857d61" revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
        <introduction>
            <para>Nito Programs is pleased to provide the Nito.Async library.</para>
        </introduction>
        <section address="SectionInto">
            <title>Introduction to Nito.Async</title>
            <content>
                <para>
                    Nito.Async provides the <codeEntityReference>T:Nito.Async.ActionThread</codeEntityReference> type, which is a thread containing an event-based message loop. It also provides a synchronization context, which means it may own classes developed using the event-based asynchronous pattern (e.g., <codeEntityReference>T:System.ComponentModel.BackgroundWorker</codeEntityReference>).
                </para>
                <para>
                    There is also a non-platform-specific <codeEntityReference>T:Nito.Async.Timer</codeEntityReference>, which is a reliable timer type that may be used in cross-platform components (e.g., it works equally well with WPF and Windows Forms projects).
                </para>
                <para>
                    <codeEntityReference>T:Nito.Async.GenericSynchronizingObject</codeEntityReference> may be used as a bridge, allowing older asynchronous components based on the <codeEntityReference>T:System.ComponentModel.ISynchronizeInvoke</codeEntityReference> model (exposing a <codeInline>SynchronizingObject</codeInline> property) to work seamlessly with the modern <codeEntityReference>T:System.Threading.SynchronizationContext</codeEntityReference> approach.
                </para>
                <para>
                    The <codeEntityReference>T:Nito.Async.ActionDispatcher</codeEntityReference> provides a main loop and synchronization context for any thread that doesn't already have one. This can be used to convert threads to be event-based. One example of usage is to convert a Console application's main thread to be event-driven, so that it may own event-based asynchronous pattern objects.
                </para>
                <para>
                    Nito.Async also provides a collection of synchronizing methods (<codeEntityReference>T:Nito.Async.Sync</codeEntityReference>) to help synchronize with asynchronous components based on <codeEntityReference>T:System.IAsyncResult</codeEntityReference> or similar free-threaded patterns.
                </para>
                <para>
                    These methods may be used in conjunction with <codeEntityReference>T:Nito.Async.AsyncResultEventArgs`1</codeEntityReference> and <codeEntityReference>T:Nito.Async.CallbackContext</codeEntityReference> to develop components using the
                    <externalLink>
                        <linkText>event-based asynchronous pattern.</linkText>
                        <linkUri>http://msdn.microsoft.com/en-us/library/wewwczdw.aspx</linkUri>
                    </externalLink>
                </para>
                <para>
                    For advanced users, Nito.Async also provides a <codeEntityReference>T:Nito.Async.SynchronizationContextRegister</codeEntityReference> that keeps track of properties of different derived <codeEntityReference>T:System.Threading.SynchronizationContext</codeEntityReference> types. Since the register already is aware of <codeEntityReference>T:System.Windows.Forms.WindowsFormsSynchronizationContext</codeEntityReference>, <codeEntityReference>T:System.Windows.Threading.DispatcherSynchronizationContext</codeEntityReference>, <codeEntityReference>T:Nito.Async.ActionDispatcherSynchronizationContext</codeEntityReference>, and <codeInline>AspNetSynchronizationContext</codeInline>, modifying the synchronization context register should be very rare.
                </para>
            </content>
        </section>
        <section address="UsingNitoAsync">
            <title>Using Nito.Async</title>
            <content>
                <para>
                    The Nito.Async.dll and Nito.Async.Sockets.dll libraries may be added as references to any .NET project using the .NET framework 3.5 (client subset) or greater. The Nito.Async.xml and Nito.Async.Sockets.xml files provide IntelliSense support for these libraries.
                </para>
                <para>
                    Both libraries may be added to the GAC as well, and referenced from there.
                </para>
            </content>
        </section>
        <section address="DeployingNitoAsync">
            <title>Deploying with Nito.Async</title>
            <content>
                <para>
                    If you have a symbol server, the dll and pdb files should be stored in your local symbol server. The pdb files are source indexed to the CodePlex site, so they should be able to pull down the correct source file versions automagically. For more information about setting up a symbol server, see John Robbins' article "Bugslayer: Symbols and Crash Dumps" in MSDN Magazine, June 2002. For more information about source indexing pdbs, see John Robbins' article "Source Server Helps You Kill Bugs Dead...", MSDN Magazine, August 2006. For excellent, detailed coverage of both topics, read John Robbins' book,
                    <externalLink>
                        <linkText>Debugging Microsoft .NET 2.0 Applications (Amazon)</linkText>
                        <linkUri>http://www.amazon.com/gp/product/0735622027?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735622027</linkUri>
                    </externalLink>
                    which is an essential resource for modern .NET developers in spite of the "2.0" in the title.
                </para>
                <para>
                    If you deploy the Nito.Async dll(s) to the GAC, then you should also deploy all the matching dlls starting with "policy", placing them into the GAC. These are publisher policy files, informing the .NET framework that the Nito.Async and Nito.Async.Socket dlls are backwards-compatible. For more information about publisher policy files, see
                    <externalLink>
                        <linkText>Redirecting Assembly Versions (MSDN).</linkText>
                        <linkUri>http://msdn.microsoft.com/en-us/library/7wd6ex19.aspx</linkUri>
                    </externalLink>
                </para>
                <para>
                    The Nito.Async dlls are both strong-named and Authenticode signed. If you wish to speed startup time and are not deploying to the GAC, you may remove the Authenticode and strong-name signatures.
                </para>
            </content>
        </section>
        <relatedTopics>
        </relatedTopics>
    </developerConceptualDocument>
</topic>